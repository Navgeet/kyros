#!/usr/bin/env python3
"""
Local demo script for testing the agent without requiring a real API key.
This will start the agent with mock responses for testing the UI and session persistence.
"""

import os
import sys
from agent_v2 import ConversationalPlanningAgent

# Mock implementations for testing
async def mock_generate_text_plan(user_request: str) -> str:
    """Mock text plan generation for demo purposes."""
    return f"""Demo Text Plan for: {user_request}

1. Analyze the user request and break it down into steps
2. Research any necessary information or prerequisites
3. Design the overall approach and architecture
4. Identify potential challenges and solutions
5. Create a step-by-step implementation plan
6. Test and validate the solution

This is a mock plan for demonstration purposes. In a real deployment, this would be generated by the InternLM API based on the current screen context and available tools."""

async def mock_improve_text_plan(original_plan: str, feedback: str, user_request: str) -> str:
    """Mock plan improvement for demo purposes."""
    return f"""Improved Demo Plan (based on feedback: "{feedback}")

{original_plan}

--- IMPROVEMENTS BASED ON FEEDBACK ---
7. Address user feedback: {feedback}
8. Refine approach based on specific requirements
9. Add additional validation steps
10. Include error handling and edge cases

This improved plan incorporates your feedback and provides a more comprehensive solution."""

async def mock_generate_code(text_plan: str, user_request: str) -> str:
    """Mock code generation for demo purposes."""
    return f"""# Demo Generated Code
# Based on plan for: {user_request}

import tools

def step_1():
    '''Implement first step from the plan'''
    print("Executing step 1 of the plan")
    return "Step 1 completed"

def step_2():
    '''Implement second step from the plan'''
    result = tools.query_screen("Current screen status")
    print(f"Step 2 status: {{result}}")
    return result

def main(messages, context=[]):
    '''Main execution function'''
    try:
        # Execute the planned steps
        result1 = step_1()
        result2 = step_2()

        # Add results to context
        context.append(result1)
        context.append(result2)

        # Notify user of completion
        messages.append("Demo task completed successfully!")

        return True
    except Exception as e:
        print(f"Error: {{e}}")
        return False

# This is mock code for demonstration purposes
# In a real deployment, this would be generated by the InternLM API"""

async def mock_improve_code(original_code: str, feedback: str, text_plan: str) -> str:
    """Mock code improvement for demo purposes."""
    return f"""{original_code}

# --- IMPROVEMENTS BASED ON FEEDBACK ---
# Feedback: {feedback}

def improved_function():
    '''Additional function based on user feedback'''
    print("Implementing improvements based on user feedback")
    # Add specific improvements here
    return "Improvements applied"

# Updated main function to include improvements
def enhanced_main(messages, context=[]):
    '''Enhanced main function with user feedback incorporated'''
    try:
        # Original steps
        result1 = step_1()
        result2 = step_2()

        # New improvements
        result3 = improved_function()

        context.extend([result1, result2, result3])
        messages.append("Enhanced demo task completed with improvements!")

        return True
    except Exception as e:
        print(f"Error: {{e}}")
        return False"""

def main():
    """Run the demo agent with mock implementations."""
    print("üé≠ Starting Conversational Planning Agent V2 - Demo Mode")
    print("=" * 60)
    print("This demo uses mock API responses for testing purposes.")
    print("The agent will generate example plans and code to demonstrate the workflow.")
    print("Real deployment requires a valid INTERNLM_API_KEY.")
    print("=" * 60)

    # Set demo environment
    os.environ['INTERNLM_API_KEY'] = 'demo-key-for-testing'
    os.environ['INTERNLM_API_URL'] = 'http://demo-mock-api'

    try:
        # Create agent with mock methods
        agent = ConversationalPlanningAgent(host='0.0.0.0', port=8001)

        # Replace real methods with mock ones
        agent._generate_text_plan = mock_generate_text_plan
        agent._improve_text_plan = mock_improve_text_plan
        agent._generate_code = mock_generate_code
        agent._improve_code = mock_improve_code

        print("üöÄ Demo agent configured successfully!")
        print("üì° Server starting at: http://localhost:8001")
        print("üé≠ Using mock API responses for demonstration")
        print("üí° Try the session persistence by refreshing the browser during a conversation")
        print("\nPress Ctrl+C to stop the demo server")

        # Run the server
        agent.run()

    except KeyboardInterrupt:
        print("\nüëã Demo stopped by user")
    except Exception as e:
        print(f"‚ùå Demo error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()